//this code is a reference from youtube

import java.util.*;

public class Problem1 {
    public static Map<String, Integer> dijkstra(Map<String, Map<String, Integer>> graph, String start) {
        Map<String, Integer> distances = new HashMap<>();
        for (String node : graph.keySet()) {
            distances.put(node, Integer.MAX_VALUE);
        }
        distances.put(start, 0);

        PriorityQueue<Node> priorityQueue = new PriorityQueue<>();
        priorityQueue.offer(new Node(start, 0));

        //d = current distance
        //n = current node
        while (!priorityQueue.isEmpty()) {
            Node current = priorityQueue.poll();
            int d = current.distance;
            String n = current.node;

            // if had already find the shorter path ignore it
            if (d > distances.get(n)) {
                continue;
            }

            Map<String, Integer> neighbors = graph.get(n);
            for (Map.Entry<String, Integer> neighbor : neighbors.entrySet()) {
                String nextNode = neighbor.getKey();
                int weight = neighbor.getValue();
                int distance = d + weight;

                // if the shorter path is found update the distance
                if (distance < distances.get(nextNode)) {
                    distances.put(nextNode, distance);
                    priorityQueue.offer(new Node(nextNode, distance));
                }
            }
        }

        return distances;
    }

    public static void main(String[] args) {
        Map<String, Map<String, Integer>> vertex = new HashMap<>();
        //create the vertex of A B C D E F
        vertex.put("A", new HashMap<>());
        vertex.put("B", new HashMap<>());
        vertex.put("C", new HashMap<>());
        vertex.put("D", new HashMap<>());
        vertex.put("E", new HashMap<>());
        
        //assign the value and distance
        vertex.get("A").put("B", 10);
        vertex.get("A").put("C", 8);
        vertex.get("B").put("D", 7);
        vertex.get("B").put("E", 6);
        vertex.get("C").put("B", 8);
        vertex.get("C").put("E", 12);
        vertex.get("D").put("E", 16);
   
        

        //The start node set with A vertex
        String startNode = "A";
        Map<String, Integer> distances = dijkstra(vertex, startNode);

        //print out the ouput
        System.out.println("The shortest distances from node " + startNode + ":");
        for (Map.Entry<String, Integer> entry : distances.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    static class Node implements Comparable<Node> {
        String node;
        int distance;

        Node(String node, int distance) {
            this.node = node;
            this.distance = distance;
        }

        @Override
        public int compareTo(Node other) {
            return Integer.compare(distance, other.distance);
        }
    }
}
